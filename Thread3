package Thread3;

// Threads that shows example of a race condition
// Digging a hole

public class ThreadThree {

    private int holeDepth = 0;
// synchronized means the hole can oly be accessed by one thread at a time.
    public void dig(){ //add synchronized here
        holeDepth++;
        System.out.println(holeDepth);
    }

    public static void main(String[] args){
        ThreadThree shovel = new ThreadThree();

        // New Thread to dig 1000 feet
        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {

                for(int i = 1; i <= 10000; i++){

                    shovel.dig();
                }
            }
        });

        // New Thread to dig another 1000 feet
        Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {

                for(int i = 1; i <= 10000; i++){

                    shovel.dig();
                }
            }
        });

        // New Thread to dig another 1000 feet
        Thread t3 = new Thread(new Runnable() {
            @Override
            public void run() {

                for(int i = 1; i <= 10000; i++){

                    shovel.dig();
                }
            }
        });

        // New Thread to dig another 1000 feet
        Thread t4 = new Thread(new Runnable() {
            @Override
            public void run() {

                for(int i = 1; i <= 10000; i++){

                    shovel.dig();
                }
            }
        });

        // New Thread to dig another 1000 feet
        Thread t5 = new Thread(new Runnable() {
            @Override
            public void run() {

                for(int i = 1; i <= 20000; i++){

                    shovel.dig();
                }
            }
        });

        t1.start();
        t2.start();
        t3.start();
        t4.start();
        t5.start();

        try{
            t1.join();
            t2.join();
            t3.join();
            t4.join();
            t5.join();
        }catch(InterruptedException e){
            e.getMessage();
        }

        System.out.println("Hole = " + shovel.holeDepth + " feet");
    }
}
